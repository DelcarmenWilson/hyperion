// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["fullTextSearch", "fullTextIndex", "prismaSchemaFolder"]
}

datasource db {
  //provider  = "postgresql"
  provider  = "mysql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

//ENUMS
enum UserRole {
  MASTER
  DEVELOPER
  SUPER_ADMIN
  ADMIN
  USER
  ASSISTANT
  STUDENT
}

enum UserAccountStatus {
  ACTIVE
  INACTIVE
  PRE_ACTIVE
  SUSPENDED
}

enum Preset {
  Birthday
  FollowUp
  Reminder
  Text
  Away
}

enum Gender {
  NA
  Male
  Female
}

enum MaritalStatus {
  Single
  Married
  Divorced
  Widowed
}

enum MessageRole {
  system
  assistant
  user
}

model LoginStatus {
  id String @id @default(cuid())

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String

  duration Int @default(0)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Organization {
  id        String   @id @default(cuid())
  name      String
  userId    String
  logo      String?
  banner    String?
  teams     Team[]   @relation("OrganizationToTeam")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Team {
  id             String       @id @default(cuid())
  organizationId String
  organization   Organization @relation("OrganizationToTeam", fields: [organizationId], references: [id], onDelete: Cascade)

  name   String
  logo   String?
  banner String?

  users  User[] @relation("UsersToTeam")
  userId String

  owner     User?    @relation("UserToTeam", fields: [ownerId], references: [id], onDelete: Cascade)
  ownerId   String?  @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

//CALLS
model Call {
  id String @id @unique

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String

  from   String
  lead   Lead?   @relation(fields: [leadId], references: [id], onDelete: Cascade)
  leadId String?

  type String @default("call")

  direction String  @default("inbound")
  status    String?
  duration  Int?
  price     String?

  recordId        String?
  recordUrl       String?
  recordStartTime DateTime?
  recordStatus    String?
  recordDuration  Int?
  recordPrice     String?

  transcriptionId   String?
  transcriptionUrl  String?
  transcriptionText String?
  listened          Boolean @default(true)
  shared            Boolean @default(false)
  appointmentId     String?

  // Answering maching detation (AMD) PARAMS
  answeredBy               String @default("unknown")
  machineDetectionDuration String @default("unknown")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Pipeline {
  id   String @id @default(cuid())
  name String

  status   LeadStatus @relation(fields: [statusId], references: [id], onDelete: Cascade)
  statusId String

  index Int @default(0)
  order Int @default(0)

  userId    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Feed {
  id      String  @id @default(cuid())
  content String  @db.LongText
  link    String?
  userId  String
  user    User    @relation(fields: [userId], references: [id])
  read    Boolean @default(false)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

//THIS IS FOR PAGEUPDATES
model PageUpdate {
  id          String  @id @default(cuid())
  type        String
  title       String
  image       String?
  description String  @db.LongText

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
