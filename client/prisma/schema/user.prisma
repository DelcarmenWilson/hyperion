model User {
    id            String    @id @default(cuid())
    userName      String    @unique
    firstName     String
    lastName      String
    phoneNumber   String?
    npn           String?
    email         String?   @unique
    emailVerified DateTime?
    image         String?
    password      String?
    role          UserRole  @default(USER)
    aboutMe       String?   @db.LongText
    title         String?
    accounts      Account[]

    isTwoFactorEnabled    Boolean                @default(false)
    twoFactorConfirmation TwoFactorConfirmation?

    teamId String?
    team   Team?   @relation("UsersToTeam", fields: [teamId], references: [id])

    teamOwned Team? @relation("UserToTeam")

    assitantId String? @unique
    assitant   User?   @relation("AssitantToUser", fields: [assitantId], references: [id])

    //LEAD COLUMNS
    leads         Lead[]
    calls         Call[]
    conversations LeadConversation[]
    appointments  Appointment[]
    activities    LeadActivity[]

    emails Email[]

    assistants  Lead[] @relation("LeadAssistant")
    sharedUsers Lead[] @relation("LeadSharedUser")

    //WORKFLOWS
    workflows Workflow[]

    //FUNNELS
    funnels Funnel[]

    //MEDIAS
    medias Media[]

    //CHAT MESSAGES
    userOne Chat[] @relation("userOneChat")
    userTwo Chat[] @relation("userTwoChat")

    chatMessages ChatMessage[]

    //USER COLUMNS
    carriers    UserCarrier[]
    licenses    UserLicense[]
    templates   UserTemplate[]
    loginStatus LoginStatus[]
    scripts     Script[]

    presets              Presets[]
    phoneNumbers         PhoneNumber[]
    phoneSettings        PhoneSettings?
    chatSettings         ChatSettings?
    displaySettings      DisplaySettings?
    notificationSettings NotificationSettings?
    schedule             Schedule?

    feedbacks   Feedback[]
    jobs        Job[]
    todos       UserTodo[]
    // ONE TO ONE RELATIONS
    assitantRel User?      @relation("AssitantToUser")

    //LINK WITH TARGET TABLE
    blueprints    BluePrint[]
    agentWorkInfo AgentWorkInfo?

    //FACEBOOK ADD ACCOUNT
    adAccount String?

    accountStatus UserAccountStatus @default(ACTIVE)

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model UserCarrier {
    id String @id @default(cuid())

    agentId String

    userId String
    user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

    carrierId String
    carrier   Carrier @relation(fields: [carrierId], references: [id], onDelete: Cascade)

    rate Int @default(70)

    comments  String?
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model UserLicense {
    id String @id @default(cuid())

    user          User     @relation(fields: [userId], references: [id], onDelete: Cascade)
    userId        String
    image         String?
    state         String
    type          String
    licenseNumber String
    dateExpires   DateTime

    comments  String?  @default("")
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model UserTemplate {
    id String @id @default(cuid())

    user        User    @relation(fields: [userId], references: [id], onDelete: Cascade)
    userId      String
    name        String
    description String?
    attachment  String?
    message     String  @db.LongText

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

//USER TODO
model UserTodoCategory {
    id     String @id @default(cuid())
    userId String

    name        String
    color       String
    description String?    @db.LongText
    order       Int
    default     Boolean    @default(false)
    todos       UserTodo[]

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    //User cannot have two categories with the same name
    @@unique([name, userId])
}

model UserTodo {
    id     String @id @default(cuid())
    userId String
    user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

    categoryId String           @default("cm448mzwq0000ujp4ok281xfg")
    category   UserTodoCategory @relation(fields: [categoryId], references: [id], onDelete: Cascade)

    title       String
    description String @db.LongText

    status   String
    comments String @db.LongText

    startAt DateTime?
    endAt   DateTime?

    reminder       Boolean   @default(false)
    reminderMethod String
    nextReminder   DateTime?

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    //User cannot have two todos with the same name
    @@unique([title, userId])
}
