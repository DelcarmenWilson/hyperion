model Feedback {
  id String @id @default(cuid())

  title String
  page  String

  description String  @db.LongText
  images      String? @db.LongText

  status   String
  comments String? @db.LongText

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String

  jobId String?
  job   Job?    @relation(fields: [jobId], references: [id])

  devId String? // the develope who completed the job

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

//TASK
model Task {
  id String @id @default(cuid())

  headLine    String
  description String  @db.LongText
  images      String? @db.LongText

  status   String @default("Pending")
  comments String @db.LongText

  startAt   DateTime
  endAt     DateTime
  published Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Job {
  id String @id @default(cuid())

  name        String
  description String? @db.LongText
  category    String

  status   String  @default("Open")
  comments String? @db.LongText

  startedAt   DateTime?
  completedAt DateTime?

  assignedTo User?   @relation(fields: [assignedId], references: [id], onDelete: Cascade)
  assignedId String?

  miniJobs  MiniJob[]
  feedbacks Feedback[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model MiniJob {
  id String @id @default(cuid())

  jobId String
  job   Job    @relation(fields: [jobId], references: [id])

  name        String
  description String? @db.LongText
  status      String  @default("Open")
  comments    String? @db.LongText

  startedAt   DateTime?
  completedAt DateTime?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
