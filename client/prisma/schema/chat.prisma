model Chat {
  id       String        @id @default(cuid())
  name     String
  icon     String?
  isGroup  Boolean
  messages ChatMessage[]

  lastMessageId String?      @unique
  lastMessage   ChatMessage? @relation("lastChatMessage", fields: [lastMessageId], references: [id], onDelete: Cascade)

  userOneId String
  userOne   User   @relation("userOneChat", fields: [userOneId], references: [id])

  userTwoId String
  userTwo   User     @relation("userTwoChat", fields: [userTwoId], references: [id])
  deletedBy String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  unread Int @default(0)
}

model ChatMessage {
  id String @id @default(cuid())

  chatId String
  chat   Chat   @relation(fields: [chatId], references: [id], onDelete: Cascade)

  lastMessage Chat? @relation("lastChatMessage")

  body  String? @db.LongText
  image String?

  senderId String
  sender   User   @relation(fields: [senderId], references: [id])

  read      Boolean               @default(false)
  reactions ChatMessageReaction[]

  deletedBy String?
  hidden Boolean               @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model ChatMessageReaction {
  id String @id @default(cuid())

  chatMessageId String
  chatMessage   ChatMessage @relation(fields: [chatMessageId], references: [id], onDelete: Cascade)
  name          String
  value         String

  userId String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
