// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["fullTextSearch", "fullTextIndex"]
}

datasource db {
  //provider  = "postgresql"
  provider  = "mysql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

enum UserRole {
  MASTER
  ADMIN
  USER
  ASSISTANT
  STUDENT
}

enum Preset {
  Birthday
  FollowUp
  Reminder
  Text
  Away
}

enum Gender {
  NA
  Male
  Female
}

enum MaritalStatus {
  Single
  Married
  Divorced
  Widowed
}

enum MessageRole {
  system
  assistant
  user
}

model User {
  id            String    @id @default(cuid())
  userName      String    @unique
  firstName     String
  lastName      String
  phoneNumber   String?
  npn           String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  password      String?
  role          UserRole  @default(USER)
  accounts      Account[]

  isTwoFactorEnabled    Boolean                @default(false)
  twoFactorConfirmation TwoFactorConfirmation?

  teamId String?
  team   Team?   @relation("UsersToTeam", fields: [teamId], references: [id])

  teamOwned Team? @relation("UserToTeam")

  assitantId String? @unique
  assitant   User?   @relation("AssitantToUser", fields: [assitantId], references: [id])

  //LEAD COLUMNS
  leads         Lead[]
  calls         Call[]
  conversations Conversation[]
  appointments  Appointment[]
  activities    Activity[]

  assistants  Lead[] @relation("LeadAssistant")
  sharedUsers Lead[] @relation("LeadSharedUser")

  //CHAT MESSAGES
  userOne      Chat[]        @relation("uesrOneChat")
  userTwo      Chat[]        @relation("uesrTwoChat")
  chatMessages ChatMessage[]

  //USER COLUMNS
  carriers    UserCarrier[]
  licenses    UserLicense[]
  templates   UserTemplate[]
  loginStatus LoginStatus[]

  presets              Presets[]
  phoneNumbers         PhoneNumber[]
  chatSettings         ChatSettings?
  notificationSettings NotificationSettings?
  schedule             Schedule?

  feedbacks   Feedback[]
  // ONE TO ONE RELATIONS
  assitantRel User?      @relation("AssitantToUser")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model UserCarrier {
  id String @id @default(cuid())

  agentId String

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String

  carrier   Carrier @relation(fields: [carrierId], references: [id], onDelete: Cascade)
  carrierId String

  comments  String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model UserLicense {
  id String @id @default(cuid())

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String

  state         String
  type          String
  licenseNumber String
  dateExpires   DateTime

  comments  String?  @default("")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model UserTemplate {
  id String @id @default(cuid())

  user        User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId      String
  name        String
  description String?
  attachment  String?
  message     String  @db.LongText

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model LoginStatus {
  id String @id @default(cuid())

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String

  Duration Int?

  comments  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// SETTINGS
model ChatSettings {
  userId String @unique
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  defaultPrompt   String @db.LongText
  defaultFunction String @db.LongText

  autoChat            Boolean @default(false)
  coach               Boolean @default(false)
  messageNotification String  @default("access-allowed")
  dataStyle           String  @default("list")

  currentCall  String?
  voicemailIn  String?
  voicemailOut String?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
}

model NotificationSettings {
  userId String @unique
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  phoneNumber  String
  calls        Boolean @default(false)
  appointments Boolean @default(false)
  messages     Boolean @default(false)
  voicemails   Boolean @default(false)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Presets {
  id String @id @default(cuid())

  agent   User   @relation(fields: [agentId], references: [id], onDelete: Cascade)
  agentId String
  type    Preset @default(Text)

  content String @db.LongText

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model PhoneNumber {
  id    String @id @default(cuid())
  phone String
  state String

  agent   User?   @relation(fields: [agentId], references: [id], onDelete: Cascade)
  agentId String?

  renewAt DateTime

  status    String   @default("Active")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Schedule {
  userId String @unique
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  title     String
  subTitle  String
  type      String   @default("hourly")
  sunday    String
  monday    String
  tuesday   String
  wednesday String
  thursday  String
  friday    String
  saturday  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model VerificationToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model PasswordResetToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model TwoFactorToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model TwoFactorConfirmation {
  id     String @id @default(cuid())
  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId])
}

model Organization {
  id        String   @id @default(cuid())
  name      String
  userId    String
  teams     Team[]   @relation("OrganizationToTeam")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Team {
  id             String       @id @default(cuid())
  organizationId String
  organization   Organization @relation("OrganizationToTeam", fields: [organizationId], references: [id], onDelete: Cascade)

  name   String
  image  String?
  banner String?

  users  User[] @relation("UsersToTeam")
  userId String

  owner     User?    @relation("UserToTeam", fields: [ownerId], references: [id], onDelete: Cascade)
  ownerId   String?  @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Lead {
  id               String        @id @default(cuid())
  firstName        String
  lastName         String
  address          String?
  city             String?
  state            String
  zipCode          String?
  homePhone        String?
  cellPhone        String        @unique
  gender           Gender        @default(NA)
  maritalStatus    MaritalStatus @default(Single)
  email            String?
  ssn              String        @default("")
  dateOfBirth      String?       @default("")
  weight           String?
  height           String?
  income           String?
  policyAmount     String?
  smoker           Boolean       @default(false)
  currentlyInsured Boolean       @default(false)
  currentInsuranse String?

  vendor String @default("Manually_Created")
  type   String @default("General")
  status String @default("New")

  quote             String @default("0.00")
  apOld             String @default("0.00")
  commisionOld      String @default("0.00")
  coverageAmountOld String @default("0.00")
  carrierOld        String @default("NA")

  defaultNumber String
  notes         String?

  beneficiaries LeadBeneficiary[]
  conditions    LeadMedicalCondition[]
  expenses      LeadExpense[]
  conversation  Conversation?
  appointments  Appointment[]
  calls         Call[]
  activities    Activity[]
  policy        LeadPolicy?

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String

  assistantId String?
  assistant   User?   @relation(name: "LeadAssistant", fields: [assistantId], references: [id])

  sharedUserId String?
  sharedUser   User?   @relation(name: "LeadSharedUser", fields: [sharedUserId], references: [id])

  recievedAt DateTime @default(now())
  createdAt  DateTime @default(now())
  updatedBy  String?
  updatedAt  DateTime @updatedAt
}

model LeadPolicy {
  leadId         String    @unique
  lead           Lead      @relation(fields: [leadId], references: [id], onDelete: Cascade)
  carrier        String
  policyNumber   String    @default("NA")
  ap             String    @default("0.00")
  commision      String    @default("0.00")
  coverageAmount String    @default("0.00")
  startDate      DateTime?
  status         String    @default("Pending")
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
}

model LeadBeneficiary {
  id           String   @id @default(cuid())
  leadId       String
  lead         Lead     @relation(fields: [leadId], references: [id], onDelete: Cascade)
  type         String   @default("Primary")
  relationship String   @default("")
  firstName    String
  lastName     String
  address      String   @default("")
  city         String   @default("")
  state        String
  zipCode      String   @default("")
  cellPhone    String   @default("")
  gender       Gender   @default(NA)
  email        String   @default("noemail@email.com")
  dateOfBirth  String   @default("")
  share        String   @default("")
  ssn          String   @default("")
  notes        String   @default("")
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
}

model LeadMedicalCondition {
  id          String           @id @default(cuid())
  leadId      String
  lead        Lead             @relation(fields: [leadId], references: [id], onDelete: Cascade)
  conditionId String
  condition   MedicalCondition @relation("LeadToCondition", fields: [conditionId], references: [id])
  diagnosed   String           @default("")
  medications String           @default("")
  notes       String           @default("")
  createdAt   DateTime         @default(now())
  updatedAt   DateTime         @updatedAt
}

model LeadExpense {
  id        String   @id @default(cuid())
  leadId    String
  lead      Lead     @relation(fields: [leadId], references: [id], onDelete: Cascade)
  type      String   @default("Expense")
  name      String
  value     Int      @default(0)
  isDefault Boolean  @default(false)
  notes     String   @default("")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model LeadDuplicates {
  id               String        @id @default(cuid())
  firstName        String
  lastName         String
  address          String?
  city             String?
  state            String
  zipCode          String?
  homePhone        String?
  cellPhone        String?
  gender           Gender        @default(NA)
  maritalStatus    MaritalStatus @default(Single)
  email            String?
  dateOfBirth      String?       @default("")
  weight           String?
  height           String?
  income           String?
  policyAmount     String?
  smoker           Boolean       @default(false)
  currentlyInsured Boolean       @default(false)
  currentInsuranse String?

  vendor String @default("Manually_Created")
  type   String @default("General")

  userId String

  recievedAt DateTime @default(now())
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}

model LeadStatus {
  id          String  @id @default(cuid())
  status      String
  type        String  @default("User Generated")
  description String?
  userId      String

  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  PipeLine  PipeLine[]
}

//CALLS
model Call {
  id String @id @unique

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String

  from   String
  lead   Lead?   @relation(fields: [leadId], references: [id], onDelete: Cascade)
  leadId String?

  type String @default("call")

  direction String  @default("inbound")
  status    String?
  duration  Int?
  price     String?

  recordId        String?
  recordUrl       String?
  recordStartTime DateTime?
  recordStatus    String?
  recordDuration  Int?
  recordPrice     String?

  transcriptionId   String?
  transcriptionUrl  String?
  transcriptionText String?
  listened          Boolean @default(true)
  shared            Boolean @default(false)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

//LEAD CONVERSATIONS
model Conversation {
  id String @id @default(cuid())

  lead   Lead   @relation(fields: [leadId], references: [id], onDelete: Cascade)
  leadId String @unique

  messages Message[]

  lastMessage String? @db.LongText

  agent   User   @relation(fields: [agentId], references: [id], onDelete: Cascade)
  agentId String

  autoChat Boolean @default(false)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Message {
  id             String       @id @default(cuid())
  conversation   Conversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)
  conversationId String

  role MessageRole @default(user)

  content    String  @db.LongText
  attachment String?

  sid    String?
  status String  @default("sent")
  error  String?
  price  String?

  senderId String?

  hasSeen   Boolean  @default(false)
  createdAt DateTime @default(now())
}

model Appointment {
  id        String    @id @default(cuid())
  startDate DateTime
  endDate   DateTime?
  title     String?
  label     String    @default("indigo")
  // labelId   String
  // label     AppointmentLabel @relation(fields: [labelId], references: [id], onDelete: Cascade)
  status    String    @default("Scheduled")
  comments  String?   @db.LongText

  agent   User   @relation(fields: [agentId], references: [id], onDelete: Cascade)
  agentId String

  lead   Lead   @relation(fields: [leadId], references: [id], onDelete: Cascade)
  leadId String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model AppointmentLabel {
  id          String  @id @default(cuid())
  name        String
  color       String
  description String? @db.LongText
  checked     Boolean @default(true)

  // appointments Appointment[]
  userId    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Activity {
  id String @id @default(cuid())

  type     String  @default("general")
  activity String
  newValue String?

  lead   Lead   @relation(fields: [leadId], references: [id], onDelete: Cascade)
  leadId String

  user   User?   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model PipeLine {
  id   String @id @default(cuid())
  name String

  status   LeadStatus @relation(fields: [statusId], references: [id], onDelete: Cascade)
  statusId String

  index Int @default(0)
  order Int @default(0)

  userId    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Feedback {
  id     String @id @default(cuid())
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String

  headLine String
  page     String

  feedback String  @db.LongText
  images   String? @db.LongText

  status   String  @default("New")
  comments String? @db.LongText

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// ADMIN TABLES

model MedicalCondition {
  id                String                 @id @default(cuid())
  name              String                 @unique
  description       String?
  leadConditions    LeadMedicalCondition[] @relation("LeadToCondition")
  carrierConditions CarrierCondition[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Carrier {
  id          String @id @default(cuid())
  image       String @default("")
  name        String
  description String @default("")
  website     String @default("")
  portal      String @default("")

  userCarriers      UserCarrier[]
  carrierConditions CarrierCondition[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

//GRID TERM SHEET
model CarrierCondition {
  id        String  @id @default(cuid())
  carrierId String
  carrier   Carrier @relation(fields: [carrierId], references: [id])

  conditionId  String
  condition    MedicalCondition @relation(fields: [conditionId], references: [id])
  requirements String
  notes        String           @default("")
  createdAt    DateTime         @default(now())
  updatedAt    DateTime         @updatedAt

  @@unique([carrierId, conditionId])
}

// SCRIPTS

model Script {
  id     String @id @default(cuid())
  title  String
  script String @db.LongText
  userId String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Quote {
  id     String  @id @default(cuid())
  quote  String  @db.LongText
  author String
  active Boolean @default(false)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// FACEBOOK

model Campaign {
  id        String    @id @default(cuid())
  name      String
  objective String
  status    String    @default("PAUSED")
  startTime DateTime?
  stopTime  DateTime?

  ads       AdSet[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model AdSet {
  id               String    @id @default(cuid())
  campaignId       String    @unique
  campaign         Campaign  @relation(fields: [campaignId], references: [id], onDelete: Cascade)
  name             String
  optimizationGoal String
  bidAmount        Int
  dailyBudget      Int
  // targeting - this is an array may need to create another table for this
  startTime        DateTime?
  stopTime         DateTime?
  status           String    @default("PAUSED")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model HyperionLead {
  id            String   @unique
  formId        String
  adName        String
  campaignName  String
  firstName     String
  lastName      String
  address       String
  city          String
  state         String
  cellPhone     String
  gender        String
  maritalStatus String
  email         String
  dateOfBirth   String
  weight        String
  height        String
  policyAmount  String
  smoker        String
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
}

//TASK
model Task {
  id String @id @default(cuid())

  headLine    String
  description String  @db.LongText
  images      String? @db.LongText

  status   String @default("Pending")
  comments String @db.LongText

  startAt   DateTime
  endAt     DateTime
  published Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Chat {
  id          String        @id @default(cuid())
  name        String
  icon        String?
  isGroup     Boolean
  messages    ChatMessage[]
  lastMessage String?       @db.LongText

  userOneId String
  userOne   User   @relation("uesrOneChat", fields: [userOneId], references: [id])

  userTwoId String
  userTwo   User     @relation("uesrTwoChat", fields: [userTwoId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  userId    String?
}

model ChatMessage {
  id String @id @default(cuid())

  chatId String
  chat   Chat   @relation(fields: [chatId], references: [id], onDelete: Cascade)

  content    String? @db.LongText
  attachment String?

  senderId String
  sender   User   @relation(fields: [senderId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
