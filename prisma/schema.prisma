// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["fullTextSearch", "fullTextIndex"]
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id                    String                 @id @default(cuid())
  name                  String?
  email                 String?                @unique
  emailVerified         DateTime?
  image                 String?
  password              String?
  role                  UserRole               @default(USER)
  accounts              Account[]
  isTwoFactorEnabled    Boolean                @default(false)
  twoFactorConfirmation TwoFactorConfirmation?
}

enum UserRole {
  ADMIN
  USER
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model VerificationToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model PasswordResetToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model TwoFactorToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model TwoFactorConfirmation {
  id     String @id @default(cuid())
  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId])
}

model Organization {
  id     String @id @default(cuid())
  name   String
  userId String
  teams  Team[] @relation("OrganizationToTeam")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Team {
  id             String       @id @default(cuid())
  organizationId String
  organization   Organization @relation("OrganizationToTeam", fields: [organizationId], references: [id])
  name           String
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
}

model Lead {
  id                String    @id @default(cuid())
  firstName         String
  lastName          String
  address           String
  city              String
  state             String
  zipCode           String
  county            String?
  homePhone         String?
  cellPhone         String
  gender            String?
  maritalStatus     String?
  email             String
  dateOfBirth       DateTime?
  age               Int?
  faceValue         Int?
  placeOfBirth      String?
  stateOfBirth      String?
  ssn               String?
  driversLicense    String?
  driversState      String?
  driversExpiration DateTime?
  greenCard         String?
  citizenship       String?
  yearInUsa         Int?
  parentsLiving     Boolean?
  fatherAge         Int?
  motherAge         Int?
  cuaseOfDeath      String?

  comments  String?
  active    Boolean  @default(true)
  createdBy String
  createdAt DateTime @default(now())
  updatedBy String?
  updatedAt DateTime @updatedAt
}

//TODO this will be reduced to only the neccesary functions
// model Message {
//   id                  String   @id @default(cuid())
//   toCountry           String?
//   toState             String?
//   smsMessageSid       String
//   numMedia            String?
//   toCity              String?
//   fromZip             String?
//   smsSid              String?
//   fromState           String?
//   smsStatus           String?
//   fromCity            String?
//   body                String?
//   fromCountry         String?
//   to                  String?
//   messagingServiceSid String?
//   toZip               String?
//   numSegments         String?
//   messageSid          String?
//   accountSid          String?
//   from                String?
//   apiVersion          String?
//   createdAt           DateTime @default(now())
// }

model Message {
  id                  String   @id @default(cuid())
  toCountry           String?
  toState             String?
  smsMessageSid       String
  numMedia            String?
  toCity              String?
  fromZip             String?
  smsSid              String?
  fromState           String?
  smsStatus           String?
  fromCity            String?
  body                String?
  fromCountry         String?
  to                  String?
  messagingServiceSid String?
  toZip               String?
  numSegments         String?
  messageSid          String?
  accountSid          String?
  from                String?
  apiVersion          String?
  createdAt           DateTime @default(now())
}
