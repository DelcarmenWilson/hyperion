// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["fullTextSearch", "fullTextIndex"]
}

datasource db {
  //provider  = "postgresql"
  provider  = "mysql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

enum UserRole {
  MASTER
  ADMIN
  USER
}

enum Preset {
  Birthday
  FollowUp
  Reminder
  Text
  Away
}

enum Gender {
  Male
  Female
}

enum MaritalStatus {
  Single
  Married
  Divorced
  Widowed
}

enum MessageRole {
  system
  assistant
  user
}

enum LeadType {
  General
  Final_Expense
  Mortgage_Protection
  Iul
  Annuity
}

enum LeadStatus {
  New
  Attempted_to_Contact
  First_Call
  Second_Call
  Third_Call
  Voicemail
  Text
  Not_Interest
  Do_Not_Call
  Sold
  Door_Knock
  Appointment
  Submitted
  Closed
  Declined
  Follow_Up
  Lapsed
  Archive
  Deleted
}

model User {
  id            String    @id @default(cuid())
  userName      String    @unique
  firstName     String
  lastName      String
  phoneNumber   String?
  npn           String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  password      String?
  role          UserRole  @default(USER)
  accounts      Account[]

  isTwoFactorEnabled    Boolean                @default(false)
  twoFactorConfirmation TwoFactorConfirmation?

  teamId String?
  team   Team?   @relation("UsersToTeam", fields: [teamId], references: [id])

  teamOwned Team? @relation("UserToTeam")

  leads         Lead[]
  calls         Call[]
  conversations Conversation[]
  appointments  Appointment[]
  activities    Activity[]

  carriers    UserCarrier[]
  licenses    UserLicense[]
  loginStatus LoginStatus[]

  presets      Presets[]
  phoneNumbers PhoneNumber[]
  chatSettings ChatSettings?
  schedule     Schedule?

  feedbacks Feedback[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model UserCarrier {
  id String @id @default(cuid())

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String

  carrier   Carrier @relation(fields: [carrierId], references: [id], onDelete: Cascade)
  carrierId String

  comments  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model UserLicense {
  id String @id @default(cuid())

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String

  state         String
  type          String
  licenseNumber String
  dateExpires   DateTime

  comments  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model LoginStatus {
  id String @id @default(cuid())

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String

  Duration Int?

  comments  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// SETTINGS
model ChatSettings {
  userId String @unique
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  defaultPrompt   String @db.LongText
  defaultFunction String @db.LongText
  //defaultPrompt   String
  //defaultFunction String

  leadInfo Boolean @default(true)

  autoChat Boolean @default(false)
  record   Boolean @default(false)
  coach    Boolean @default(false)

  currentCall String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Presets {
  id String @id @default(cuid())

  agent   User   @relation(fields: [agentId], references: [id], onDelete: Cascade)
  agentId String
  type    Preset @default(Text)

  content String @db.LongText
  //content String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model PhoneNumber {
  id    String @id @default(cuid())
  phone String
  state String

  agent   User?   @relation(fields: [agentId], references: [id], onDelete: Cascade)
  agentId String?

  renewAt DateTime

  status    String   @default("Active")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Schedule {
  userId String @unique
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  title     String
  subTitle  String
  type      String   @default("hourly")
  sunday    String
  monday    String
  tuesday   String
  wednesday String
  thursday  String
  friday    String
  saturday  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model VerificationToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model PasswordResetToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model TwoFactorToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model TwoFactorConfirmation {
  id     String @id @default(cuid())
  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId])
}

model Organization {
  id        String   @id @default(cuid())
  name      String
  userId    String
  teams     Team[]   @relation("OrganizationToTeam")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Team {
  id             String       @id @default(cuid())
  organizationId String
  organization   Organization @relation("OrganizationToTeam", fields: [organizationId], references: [id], onDelete: Cascade)

  name   String
  image  String?
  banner String?

  users  User[] @relation("UsersToTeam")
  userId String

  owner     User?    @relation("UserToTeam", fields: [ownerId], references: [id], onDelete: Cascade)
  ownerId   String?  @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Lead {
  id               String        @id @default(cuid())
  firstName        String
  lastName         String
  address          String?
  city             String?
  state            String
  zipCode          String?
  homePhone        String?
  cellPhone        String
  gender           Gender        @default(Male)
  maritalStatus    MaritalStatus @default(Single)
  email            String?
  dateOfBirth      DateTime?
  weight           Int?
  height           String?
  income           Int?
  policyAmount     Int?
  smoker           Boolean       @default(false)
  currentlyInsured Boolean       @default(false)
  currentInsuranse String?

  vendor String     @default("Manually_Created")
  type   LeadType   @default(General)
  status LeadStatus @default(New)

  quote      Int?
  saleAmount Int?
  commision  Int?
  costOfLead Int?

  defaultNumber String
  notes         String?

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String

  conversation Conversation?
  appointments Appointment[]
  calls        Call[]
  activities   Activity[]

  recievedAt DateTime @default(now())
  createdAt  DateTime @default(now())
  updatedBy  String?
  updatedAt  DateTime @updatedAt
}

//CALLS
model Call {
  id String @id @unique

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String

  from   String
  lead   Lead?   @relation(fields: [leadId], references: [id], onDelete: Cascade)
  leadId String?

  type String @default("call")

  direction String  @default("inbound")
  status    String?
  duration  Int?

  recordId        String?
  recordUrl       String?
  recordStartTime DateTime?
  recordStatus    String?
  recordDuration  Int?

  transcriptionId   String?
  transcriptionUrl  String?
  transcriptionText String?
  listened          Boolean @default(true)

  price String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Conversation {
  id String @id @default(cuid())

  lead   Lead   @relation(fields: [leadId], references: [id], onDelete: Cascade)
  leadId String @unique

  messages Message[]

  lastMessage String? @db.LongText
  //lastMessage String?

  agent   User   @relation(fields: [agentId], references: [id], onDelete: Cascade)
  agentId String

  autoChat Boolean @default(false)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Message {
  id             String       @id @default(cuid())
  conversation   Conversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)
  conversationId String

  role MessageRole @default(user)

  content String @db.LongText
  //content String

  sid    String?
  status String  @default("sent")
  error  String?
  price  String?

  senderId String?

  hasSeen   Boolean  @default(false)
  createdAt DateTime @default(now())
}

model Appointment {
  id   String   @id @default(cuid())
  date DateTime

  agent   User   @relation(fields: [agentId], references: [id], onDelete: Cascade)
  agentId String

  lead   Lead   @relation(fields: [leadId], references: [id], onDelete: Cascade)
  leadId String

  status   String  @default("Scheduled")
  comments String? @db.LongText
  //comments String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Activity {
  id String @id @default(cuid())

  type     String  @default("general")
  activity String
  newValue String?

  lead   Lead   @relation(fields: [leadId], references: [id], onDelete: Cascade)
  leadId String

  user   User?   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Feedback {
  id     String @id @default(cuid())
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String

  headLine String
  page     String

  feedback String @db.LongText
  //feedback String

  status   String  @default("New")
  comments String? @db.LongText
  //comments String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// ADMIN TABLES

model MedicalCondition {
  id          String   @id @default(cuid())
  name        String
  description String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Carrier {
  id          String @id @default(cuid())
  image       String
  name        String
  description String

  userCarriers UserCarrier[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
