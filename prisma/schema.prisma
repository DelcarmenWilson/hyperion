// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["fullTextSearch", "fullTextIndex"]
}

datasource db {
  provider  = "postgresql"
  //provider  = "mysql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

enum UserRole {
  MASTER
  ADMIN
  USER
}

enum CallDirection {
  Inbound
  Outbound
}

enum Preset {
  Birthday
  FollowUp
  Reminder
  Text
  Away
}

enum Gender {
  Male
  Female
}

enum MaritalStatus {
  Single
  Married
  Divorced
  Widowed
}

enum MessageRole {
  system
  assistant
  user
}

model User {
  id            String    @id @default(cuid())
  username      String
  firstName     String
  lastName      String
  phoneNumber   String?
  npn           String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  password      String?
  role          UserRole  @default(USER)
  accounts      Account[]

  isTwoFactorEnabled    Boolean                @default(false)
  twoFactorConfirmation TwoFactorConfirmation?

  teamId String?
  team   Team?   @relation(fields: [teamId], references: [id])

  conversations Conversation[]

  messages Message[] @relation("MessageToUser")

  appointments Appointment[]
  calls        Call[]
  presets      Presets[]
  phoneNumbers PhoneNumber[]
  chatSettings ChatSettings?
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model VerificationToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model PasswordResetToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model TwoFactorToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model TwoFactorConfirmation {
  id     String @id @default(cuid())
  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId])
}

model Organization {
  id        String   @id @default(cuid())
  name      String
  userId    String
  teams     Team[]   @relation("OrganizationToTeam")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Team {
  id             String       @id @default(cuid())
  organizationId String
  organization   Organization @relation("OrganizationToTeam", fields: [organizationId], references: [id], onDelete: Cascade)

  name      String
  users     User[]
  userId    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Lead {
  id            String         @id @default(cuid())
  firstName     String
  lastName      String
  address       String
  city          String
  state         String
  zipCode       String
  homePhone     String?
  cellPhone     String
  gender        Gender         @default(Male)
  maritalStatus MaritalStatus  @default(Single)
  email         String
  dateOfBirth   DateTime?
  // age               Int?
  // faceValue         Int?
  // placeOfBirth      String?
  // stateOfBirth      String?
  // ssn               String?
  // driversLicense    String?
  // driversState      String?
  // driversExpiration DateTime?
  // greenCard         String?
  // citizenship       String?
  // yearInUsa         Int?
  // parentsLiving     Boolean?
  // fatherAge         Int?
  // motherAge         Int?
  // cuaseOfDeath      String?
  status        String         @default("New")
  defaultNumber String
  notes         String?
  active        Boolean        @default(true)
  owner         String?
  conversations Conversation[]
  appointments  Appointment[]
  calls         Call[]
  createdAt     DateTime       @default(now())
  updatedBy     String?
  updatedAt     DateTime       @updatedAt
}

model Conversation {
  id String @id @default(cuid())

  lead   Lead   @relation(fields: [leadId], references: [id], onDelete: Cascade)
  leadId String

  messages Message[]

  agent   User   @relation(fields: [agentId], references: [id], onDelete: Cascade)
  agentId String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Message {
  id             String       @id @default(cuid())
  conversation   Conversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)
  conversationId String

  role    MessageRole @default(user)
  //content String      @db.LongText
  content String

  sender   User?   @relation("MessageToUser", fields: [senderId], references: [id], onDelete: Cascade)
  senderId String?

  hasSeen   Boolean  @default(false)
  createdAt DateTime @default(now())
}

model Appointment {
  id   String   @id @default(cuid())
  date DateTime

  agent   User   @relation(fields: [agentId], references: [id], onDelete: Cascade)
  agentId String

  lead   Lead   @relation(fields: [leadId], references: [id], onDelete: Cascade)
  leadId String

  status   String @default("Scheduled")
  //comments String @db.LongText
  comments String

  createdAt DateTime @default(now())
}

// SETTINGS
model ChatSettings {
  userId String @unique
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  // defaultPrompt   String @db.LongText
  // defaultMessage  String @db.LongText
  // defaultFunction String @db.LongText
  defaultPrompt   String
  defaultMessage  String
  defaultFunction String

  leadInfo  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

//CALLS
model Call {
  id      String @id @unique
  agent   User   @relation(fields: [agentId], references: [id], onDelete: Cascade)
  agentId String

  lead   Lead   @relation(fields: [leadId], references: [id], onDelete: Cascade)
  leadId String

  direction CallDirection @default(Inbound)
  status    String?
  duration  String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Presets {
  id String @id @default(cuid())

  agent   User   @relation(fields: [agentId], references: [id], onDelete: Cascade)
  agentId String
  type    Preset @default(Text)
  //content String @db.LongText
  content String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model PhoneNumber {
  id    String @id @default(cuid())
  phone String
  state String

  agent   User?   @relation(fields: [agentId], references: [id], onDelete: Cascade)
  agentId String?

  renewAt DateTime

  status    String   @default("Active")
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())
}
